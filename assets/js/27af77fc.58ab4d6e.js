(self.webpackChunkarchitecture_at_99x=self.webpackChunkarchitecture_at_99x||[]).push([[9411],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(k,o(o({ref:t},p),{},{components:r})):n.createElement(k,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3291:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],l={id:"aws-microservice-overview",title:"Overview"},s={unversionedId:"kickstarters/aws-microservices/aws-microservice-overview",id:"kickstarters/aws-microservices/aws-microservice-overview",isDocsHomePage:!1,title:"Technical Overview - AWS Microservice IaC Kickstarter",description:"Followings are the quality attributes that we are designing this template for.",source:"@site/docs/kickstarters/aws-microservices/technical-overview.md",sourceDirName:"kickstarters/aws-microservices",slug:"/kickstarters/aws-microservices/aws-microservice-overview",permalink:"/docs/kickstarters/aws-microservices/aws-microservice-overview",editUrl:"https://github.com/99x/architecture.99x.io/edit/master/docs/kickstarters/aws-microservices/technical-overview.md",version:"current",frontMatter:{id:"aws-microservice-overview",title:"Overview"}},u=[{value:"Authentication and Authorization",id:"authentication-and-authorization",children:[]},{value:"Create a Customer Order",id:"create-a-customer-order",children:[]},{value:"List Customer Orders",id:"list-customer-orders",children:[]},{value:"Approve Order",id:"approve-order",children:[]}],p={toc:u};function c(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Followings are the quality attributes that we are designing this template for."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Security",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Only authenticated users can perform operations within the application"),(0,i.kt)("li",{parentName:"ul"},"Setup firewall configurations (VNet / Application Gateway Firewall)"),(0,i.kt)("li",{parentName:"ul"},"Generate audit logs for user actions"),(0,i.kt)("li",{parentName:"ul"},"Apply data masking for user sensitive data in the database"),(0,i.kt)("li",{parentName:"ul"},"Avoid exposing unnecessary resources (database, storage, etc) to public network")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Scalability",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"One million requests per minute"),(0,i.kt)("li",{parentName:"ul"},"Scaling down when there are less requests"),(0,i.kt)("li",{parentName:"ul"},"Use load balancers and horizontal scaling")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Reliability"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Automatically recover from failure"),(0,i.kt)("li",{parentName:"ul"},"Scale horizontally to increase aggregate workload availability"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Performance"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Following performance metrics should be considered",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Input/Ouput Operations per second"),(0,i.kt)("li",{parentName:"ul"},"Caching to improve access performance"),(0,i.kt)("li",{parentName:"ul"},"Autoscaling (Vertical and Horizontal)"))),(0,i.kt)("li",{parentName:"ul"},"Performance testing ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Stress Testing"),(0,i.kt)("li",{parentName:"ul"},"Load Testing"),(0,i.kt)("li",{parentName:"ul"},"Failover Testing"),(0,i.kt)("li",{parentName:"ul"},"Soak testing"))),(0,i.kt)("li",{parentName:"ul"},"Services such as Auto Scaling, Caching in AWS cloud can be used to improve performance")))),(0,i.kt)("h1",{id:"modules"},"Modules"),(0,i.kt)("p",null,"This boilerplate contains a simple web application to place a customer order for a product"),(0,i.kt)("p",null,"Core Functionalities of the application include"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Adding Orders"),(0,i.kt)("li",{parentName:"ul"},"Listing Orders"),(0,i.kt)("li",{parentName:"ul"},"Notifying End Users with Order Information")),(0,i.kt)("h1",{id:"foundation-layers"},"Foundation Layers"),(0,i.kt)("p",null,"Following Layers will be part of the system."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authentication and Authorization"),(0,i.kt)("li",{parentName:"ul"},"Web GUI - The Technology used should be replaceable "),(0,i.kt)("li",{parentName:"ul"},"Microservices - Backend services to process requests and handle business logics"),(0,i.kt)("li",{parentName:"ul"},"Database")),(0,i.kt)("h2",{id:"authentication-and-authorization"},"Authentication and Authorization"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OAuth2 Authentication method should be used to authenticate users."),(0,i.kt)("li",{parentName:"ul"},"Authorization should be enabled for role based access control.")),(0,i.kt)("h1",{id:"microservices"},"Microservices"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Order Service",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This service handles the CRUD operation of the customer order.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Omni Channel Notification Service ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This service handles the transmission of the order information notifications to the end-user.")))),(0,i.kt)("h2",{id:"create-a-customer-order"},"Create a Customer Order"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[POST]"," /api/customer-orders")),(0,i.kt)("p",null,"This endpoint is defined for creating a customer order. Following are the responsibilities of the endpoint."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Validate the Order request"),(0,i.kt)("li",{parentName:"ul"},"Call the Notification Service and email the supplier on the placed order"),(0,i.kt)("li",{parentName:"ul"},"Create a new record in the database")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authorization : Bearer (auth-token)"),(0,i.kt)("li",{parentName:"ul"},"Content-Type : application/json")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Body")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "Order No": "string",\n    "Customer": "string",\n    "Supplier": "string",\n    "Product": "string"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Responses")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[201 - created]"," type of response will be returned as a success output together with the created order item in the response body."),(0,i.kt)("li",{parentName:"ul"},"[400 - bad request]"," type of response will be returned for validation errors with the error message in the request body."),(0,i.kt)("li",{parentName:"ul"},"[500 - internal server error]"," type of response will be returned for internal servers errors with the exception.")),(0,i.kt)("h2",{id:"list-customer-orders"},"List Customer Orders"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[GET]"," /api/customer-orders")),(0,i.kt)("p",null,"This endpoint is defined to retrieve all customer orders from the system. Following are the responsibilities of the endpoint."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Return all customer orders from the system sorted by created date")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authorization : Bearer (auth-token)"),(0,i.kt)("li",{parentName:"ul"},"Content-Type : application/json")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Body")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-JSON"},'[{\n  "Order No": "string",\n  "Customer": "string",\n  "Product": "string",\n  "Supplier": "string",\n  "createdDate": "timestamp",\n  "status": "string"\n},\n{\n  "Order No": "string",\n  "Customer": "string",\n  "Product": "string",\n  "Supplier": "string",\n  "createdDate": "timestamp",\n  "status": "string"\n}]\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Responses")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[200 - ok]"," type response will be returned as a success output together with the list of customer orders in the response body."),(0,i.kt)("li",{parentName:"ul"},"[204 - no content]"," type response will be returned if there are no customer order found in the system."),(0,i.kt)("li",{parentName:"ul"},"[500 - internal server error]"," type of response will be returned for internal servers errors with the exception.")),(0,i.kt)("h2",{id:"approve-order"},"Approve Order"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[PATCH]"," /api/customer-orders/{id}?action=approve")),(0,i.kt)("p",null,"This endpoint is defined to approve a customer order. Following are the responsibilities of the endpoint."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Validate if received order no exists in the database."),(0,i.kt)("li",{parentName:"ul"},'Validate if order is in "Planned" status.'),(0,i.kt)("li",{parentName:"ul"},'Change status of the order from "Planned" to "Approved".'),(0,i.kt)("li",{parentName:"ul"},"Modify record in the database.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authorization : Bearer (auth-token)"),(0,i.kt)("li",{parentName:"ul"},"Content-Type : application/json")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Responses")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[200 - ok]"," type response will be returned as a success output together with the modified customer order in the response body."),(0,i.kt)("li",{parentName:"ul"},"[400 - bad request]"," type response will be returned with a validation error if the given order no does not exist.")))}c.isMDXComponent=!0}}]);